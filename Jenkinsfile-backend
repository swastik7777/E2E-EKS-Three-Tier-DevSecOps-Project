pipeline {
    agent any

    tools {
        jdk 'jdk'
    }

    environment {
        SCANNER_HOME = tool name: 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-2'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }

    stages {

        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'githubCred', url: 'https://github.com/swastik7777/E2E-EKS-Three-Tier-DevSecOps-Project.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    dir('app/backend') {
                        withSonarQubeEnv('sonar-server') {
                            sh '''
                                ${SCANNER_HOME}/bin/sonar-scanner \
                                  -Dsonar.projectKey=three-tier-backend \
                                  -Dsonar.sources=. \
                                  -Dsonar.host.url=http://98.83.111.141:9000 \
                                  -Dsonar.login=${SONAR_TOKEN}
                            '''
                        }
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }

        // // Optional OWASP Stage (Uncomment if needed)
        // /*
        // stage('OWASP Dependency-Check Scan') {
        //     steps {
        //         dir('app/backend') {
        //             dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //         }
        //     }
        // }
        // */

        stage('Trivy File Scan') {
            steps {
                dir('app/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                dir('app/backend') {
                    sh '''
                        docker system prune -f
                        docker container prune -f
                        docker build -t ${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} .
                    '''
                }
            }
        }

        stage('ECR Image Pushing') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key']
                ]) {
                    sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set region $AWS_DEFAULT_REGION

                        aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
                        docker login --username AWS --password-stdin $REPOSITORY_URI

                        docker tag $AWS_ECR_REPO_NAME:$BUILD_NUMBER $REPOSITORY_URI/$AWS_ECR_REPO_NAME:$BUILD_NUMBER
                        docker push $REPOSITORY_URI/$AWS_ECR_REPO_NAME:$BUILD_NUMBER
                    '''
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = 'E2E-EKS-Three-Tier-DevSecOps-Project'
                GIT_USER_NAME = 'swastik7777'
            }
            steps {
                dir('k8s/manifests/backend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GH_TOKEN')]) {
                        sh '''
                            git config user.email "swastikgomase.sae.comp@gmail.com"
                            git config user.name "swastik7777"
                            imageTag="${REPOSITORY_URI%/}/${AWS_ECR_REPO_NAME#/}:$BUILD_NUMBER"
                            awk -v imageTag="${imageTag}" '/image:/ {$0 = "        image: " imageTag} {print}' deployment.yaml > temp.yaml && mv temp.yaml deployment.yaml
                            echo "Updating deployment.yaml with image tag: ${imageTag}"
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git push https://${GH_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
